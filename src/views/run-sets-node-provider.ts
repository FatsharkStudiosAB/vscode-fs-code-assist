import * as vscode from "vscode";
import { getActiveToolchain } from "../extension";
import type { RunSet, ToolchainConfig } from "../utils/stingray-config";

const buildTooltip = (config: ToolchainConfig, runSet: RunSet) => {
	const tooltip = new vscode.MarkdownString();
	runSet.RunItems.forEach((runItem: any, i) => {
		if (i > 0) {
			tooltip.appendMarkdown("\n---\n");
		}
		const target = config.Targets.find((target) => target.Id === runItem.Target);
		const targetName = target?.Name ?? "<UNKNOWN TARGET>";
		tooltip.appendMarkdown(`**Instance ${i+1}** on _${targetName}_  \n`);
		const chunks: string[][] = [];
		let currentChunk: string[] = [];
		runItem.ExtraLaunchParameters?.split(/ +/).forEach((param: string) => {
			if (param[0] === "-") {
				currentChunk = [];
				chunks.push(currentChunk);
			}
			currentChunk.push("`"+param+"`");
		});
		for (const chunk of chunks) {
			tooltip.appendMarkdown(`${chunk.join(" ")}  \n`);
		}
	});
	return tooltip;
};

export class RunSetsNodeProvider implements vscode.TreeDataProvider<RunSet> {
	private _onDidChangeTreeData: vscode.EventEmitter<RunSet | undefined | void> = new vscode.EventEmitter<RunSet | undefined | void>();
	readonly onDidChangeTreeData: vscode.Event<RunSet | undefined | void> = this._onDidChangeTreeData.event;

	async getTreeItem(runSet: RunSet): Promise<vscode.TreeItem> {
		const toolchain = getActiveToolchain()!;
		const config = await toolchain.config();

		const collapsibleState = runSet.RunItems.length > 1 ? vscode.TreeItemCollapsibleState.Collapsed : undefined;
		const treeItem = new vscode.TreeItem(runSet.Name, collapsibleState);
		treeItem.tooltip = buildTooltip(config, runSet);
		treeItem.iconPath = (runSet.Id === "__vscode_autogenerated_target_runset") ? new vscode.ThemeIcon("vm") : undefined;
		treeItem.contextValue = "run-set";
		return treeItem;
	}

	async getChildren(parent?: RunSet): Promise<RunSet[] | undefined> {
		// If a parent is provided "unfold" the individual instances.
		if (parent) {
			return parent.RunItems.map((runItem, i) => {
				return {
					Id: "__vscode_autogenerated_instance_runset",
					Name: `Instance ${i+1}`,
					RunItems: [ runItem ],
				};
			});
		}

		const toolchain = getActiveToolchain()!;
		const config = await toolchain.config();

		// Otherwise provide default targets and configured run sets.
		const runSets: RunSet[] = config.Targets.map((target) => {
			return {
				Id: "__vscode_autogenerated_target_runset",
				Name: `${target.Name} [${target.Platform}]`,
				RunItems: [
					{
						Target: target.Id,
					},
				],
			};
		});
		return runSets.concat(config.RunSets);;
	}

	refresh(): void {
		this._onDidChangeTreeData.fire();
	}
}
